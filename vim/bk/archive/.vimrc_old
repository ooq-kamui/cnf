
" opn markdown preview
"nnoremap xx :call Markdown_2_html()<cr>

func! Markdown_2_html() abort
  
  if ! Is_file_type('markdown')
    return
  endif
  
  let l:path = expand('%')
  
  call Exe('! node ~/sh/nodejs/md_2_html.js ' . l:path)
  
  "call Opn_app(l:path . '.html')
endfunc

" 
" grep
" 

"func! Grep(opt, p_str) abort " use not
"  
"  call Opn_grep_wk()
"
"  let l:rg_cmd = Rg_cmd_str(a:opt, a:p_str)
"  call Ins_sys_cmd(l:rg_cmd)
"endfunc
"
"command! -nargs=? GrepStr call Grep_str(<q-args>) " use not
"
"func! Grep_str(str) abort " use not
"  
"  call Grep(v:null, a:str)
"endfunc
"
"command! -nargs=? GrepWrd call Grep_wrd(<q-args>) " use not
"
"func! Grep_wrd(str) abort " use not
"  
"  call Grep('-w'  , a:str)
"endfunc

" fzf run fd

command! -nargs=0 FzfRunFd call Fzf_run_fd()

func! Fzf_run_fd() abort

  call fzf#run(
  \   {
  \     'source' : Fd_rslt_ar(),
  \     'sink'   : funcref('Tag_jmp'),
  \     'window' : '-tabnew',
  \   }
  \ )
  "\     'options': ['--reverse'],
  "\     'options': ['--no-sort'],
endfunc

func! Fd_rslt_ar() abort

  let l:rslt_txt = Fd_rslt_txt()
  let l:rslt_ar  = split(l:rslt_txt, "\n")
  return l:rslt_ar
endfunc

func! Fd_rslt_txt() abort
  
  let l:fd_cmd = Fd_cmd()

  let l:rslt_txt = Sys_cmd(l:fd_cmd)
  return l:rslt_txt
endfunc

func! Fd_cmd() abort

  "let l:fd_cmd = 'fd --type f --hidden --follow -I --exclude .git'
  let l:fd_cmd = 'fd --type f --hidden --follow --exclude .git'

  return l:fd_cmd
endfunc

" ctags

set tags=./.tags;
"nnoremap <c-]> g<c-]>
"nnoremap xx :!sh sh/ctags.sh

" ctags ( fzf )

"nnoremap xx :Tags <c-r><c-w><cr>
"vnoremap xx "zy:Tags <c-r>z<cr>
command! -bang -nargs=? Tags
\ call fzf#vim#tags(<q-args>, <bang>1)


" netrw " use not

hi netrwDir      ctermfg=lightgreen
hi netrwTreeBar  ctermfg=lightgreen
hi netrwClassify ctermfg=lightgreen
hi netrwComment  ctermfg=14         ctermbg=none    cterm=none
hi netrwList     ctermfg=yellow     ctermbg=none    cterm=none
hi netrwVersion  ctermfg=130        ctermbg=none    cterm=none
hi netrwHelpCmd  ctermfg=130        ctermbg=none    cterm=none


" ???

"func! N_bracket_pair_tgl() abort
"
"  let l:col1 = col('.')
"  call N_bracket_tgl()
"
"  call Normal('%')
"  let l:col2 = col('.')
"
"  if l:col1 == l:col2
"    return
"  endif
"
"  call N_bracket_tgl()
"  call Normal('%')
"endfunc



